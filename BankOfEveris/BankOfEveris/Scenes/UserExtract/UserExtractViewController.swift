//
//  UserExtractViewController.swift
//  BankOfEveris
//
//  Created by Leandro Roberto Medeiros on 12/04/19.
//  Copyright (c) 2019 Leandro Roberto Medeiros. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserExtractDisplayLogic: class {
    func success(extract: [ExtractResponse.ExtractData]) -> Void
    func renderUserAccountData(userData: LoginResponse.UserAccount) -> Void
}

class UserExtractViewController: UIViewController, UserExtractDisplayLogic {
    @IBOutlet weak var labelUserName: UILabel!
    @IBOutlet weak var labelUserAccount: UILabel!
    @IBOutlet weak var labelUserBalance: UILabel!
    @IBOutlet weak var tableViewExtract: UITableView!
    
    var userId: String?
    var extractItems: [ExtractResponse.ExtractData] = []
    var interactor: UserExtractBusinessLogic?
    var router: (NSObjectProtocol & UserExtractRoutingLogic & UserExtractDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = UserExtractInteractor()
        let presenter = UserExtractPresenter()
        let router = UserExtractRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    override func viewDidLoad(){
        super.viewDidLoad()
        interactor?.getUserAccountData()
        registerTableViewCell()
        setupTableViewCell()
        renderExtractItemsList()
        
    }
    // MARK: Render user account data inside ExtractViewController
    func renderUserAccountData(userData: LoginResponse.UserAccount) {
        print("ExtractViewController", userData)
        
        self.userId = String(userData.id)
        
        if let userName = userData.name {
            self.labelUserName.text = userName
        }
        
        if let agency = userData.agency, let account = userData.account {
            self.labelUserAccount.text = "\(account) / \(agency.maskAgency())"
        }
        
        if let balance = userData.balance {
            self.labelUserBalance.text = Double(balance).transformToCurrency
        }
    }
    
    @IBAction func actionLogoutUser(_ sender: Any) {
        interactor?.clearUserDefaults()
        self.navigationController?.popViewController(animated: true)
    }
    
    func success(extract: [ExtractResponse.ExtractData]) {
        showExtractList(extract: extract)
    }
    
    func showExtractList(extract: [ExtractResponse.ExtractData]) {
        self.extractItems = extract
        self.tableViewExtract.reloadData()
    }
    
    func renderExtractItemsList() {
        guard let userId = self.userId else { return }
        
        interactor?.getExtractListByUser(userId: userId)
    }
}

extension UserExtractViewController: UITableViewDelegate, UITableViewDataSource {
    private func setupTableViewCell() {
        self.tableViewExtract.delegate = self
        self.tableViewExtract.dataSource = self
    }
    
    private func registerTableViewCell() {
        let nib = UINib(nibName: "UserExtractTableViewCell", bundle: Bundle.main)
        
        self.tableViewExtract.register(nib, forCellReuseIdentifier: "extractTableViewCell")
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.extractItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableViewExtract.dequeueReusableCell(withIdentifier: "extractTableViewCell") as! UserExtractTableViewCell
        
        cell.renderUserExtractData(extract: self.extractItems[indexPath.row])
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Recentes"
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return CGFloat(42)
    }
    
    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        if let headerView = view as? UITableViewHeaderFooterView {
            headerView.contentView.backgroundColor = #colorLiteral(red: 0.9960784314, green: 0.9960784314, blue: 0.9960784314, alpha: 1)
            headerView.textLabel?.textColor = #colorLiteral(red: 0.2823529412, green: 0.3294117647, blue: 0.3960784314, alpha: 1)
            headerView.textLabel?.font = UIFont(name: "HelveticaNeue", size: 17)
        }
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
}
