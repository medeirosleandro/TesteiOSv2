//
//  UserLoginInteractor.swift
//  BankOfEveris
//
//  Created by Leandro Roberto Medeiros on 12/04/19.
//  Copyright (c) 2019 Leandro Roberto Medeiros. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserLoginBusinessLogic{
    func validateLoginFields(user: String, password: String) -> Bool
    func loginUser(user: String, password: String) -> Void
}

protocol UserLoginDataStore {
    var userAccount: LoginResponse.UserAccount? { get }
}

class UserLoginInteractor: UserLoginBusinessLogic, UserLoginDataStore{
    var presenter: UserLoginPresentationLogic?
    var worker = LoginWorker()
    var userAccount: LoginResponse.UserAccount?
    
    func validateLoginFields(user: String, password: String) -> Bool {
        if valueEmpty(user: user, password: password) && userLoginValid(user: user) && passwordIsValid(password: password) {
            self.loginUser(user: user, password: password)
            
            return true
        }
        
        return false
    }
    
    func valueEmpty(user: String, password: String) -> Bool{
        
        if user.isEmpty && password.isEmpty{
            
            presenter?.showCustomAlert(title: "Campo Vazio", message: "Os campos não podem estar vazios.")
            
            return false
        }
        return true
        
    }
    
    func userLoginValid (user: String)->Bool{
        if user.isValidCPF() || user.isValidEmail() {
            return true
        }
        presenter?.showCustomAlert(title: "CPF ou e-mail inválidos", message: "Por favor insira CPF e/ou e-mail validos.")
        
        return false
    }
    
    func passwordIsValid(password: String) -> Bool {
        if password.isValidPassword() {
            return true
        }
        presenter?.showCustomAlert(title: "Senha incorreta", message: "A senha deve conter uma letra maiúscula, um caracter especial e um número.")
        return false
    }
    
    func loginUser(user: String, password: String) {
        let parameters = ["user": user, "password": password]
        
        worker.getUserData(parameters: parameters, responseRequest: { response in
            self.userAccount = response.userAccount
            self.saveUserOnUSerDefaults(user: user)
            self.presenter?.login(loginResponse: response)
        })
    }
    
    func saveUserOnUSerDefaults(user: String) {
        UserDefaults.standard.set(user, forKey: "user")
    }
}
